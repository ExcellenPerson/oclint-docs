.. _compile-oclint:

Compiling and Testing OCLint
============================

To compile OCLint, get a clone on your local machine.

Compiling LLVM/Clang
--------------------

You need to compile the specified version of LLVM/Clang as submodule of the git repository, please run

.. code-block:: bash

    ./script/llvmClangBuild.sh

We will fetch submodules, configure the compilation, and build LLVM/Clang for you. The custom libclang build will be stored in OCLint_clone_folder/build/llvm folder. (Check out `llvmClangBuild.sh`_ from github.)

Compiling OCLint
----------------

To build OCLint with unit tests, please run

.. code-block:: bash

    ./script/moBuild.sh

The script will build OCLint main program, its rules, and test program for you, and run unit tests immediately after the build is success. (Check out `moBuild.sh`_ from github.)

To build a release version of OCLint, simply run

.. code-block:: bash

    ./script/moInstallationBuild.sh <installation_path>

It will build OCLint binary program, its rules, and copy OCLint related libraries, including its own rule libraries and libclang, to the target installation path. The installations will be separated by build version number. If you get the same version number as this website provides, then it should be exactly same as we build our release version with this script. (Check out `moInstallationBuild.sh`_ from github.)

Also, we have `moCIBuild.sh`_ to continuously build our source code, test cases, and generate code coverage report with awesome `Jenkins CI`_. Other than these, this script invokes “dogfooding” inspection to scan OCLint source code with OCLint itself as well.

Instead of a clean build, `moQuickBuild.sh`_ gives you the ability to build the latest changes based on modification timestamp, to save quite a lot of your precious time.

Testing OCLint
--------------

OCLint_clone_folder/build/oclint contains all OCLint related files in a standard CMake build structure. You can find OCLint executable binary, test executable binary in bin folder. Related libraries are stored in lib folder. You can run

.. code-block:: bash

    ./build/bin/oclint_test

to invoke the tests. If build is invoked by CI build script, in addition to ``llvm`` and ``oclint`` folders, following folders/files will be generated in OCLint_clone_folder/build folder as well.

* testresult.txt - Test results
* report - Contains code coverage report generated by `lcov`_
* sameplesinspection.txt - Results for inspections on some sample files
* selfinspection.txt - Results for self inspection

.. _llvmClangBuild.sh: https://github.com/longyiqi/oclint/blob/master/script/llvmClangBuild.sh
.. _moBuild.sh: https://github.com/longyiqi/oclint/blob/master/script/moBuild.sh
.. _moInstallationBuild.sh: https://github.com/longyiqi/oclint/blob/master/script/moInstallationBuild.sh
.. _moCIBuild.sh: https://github.com/longyiqi/oclint/blob/master/script/moCIBuild.sh
.. _moQuickBuild.sh: https://github.com/longyiqi/oclint/blob/master/script/moQuickBuild.sh
.. _Jenkins CI: http://jenkins-ci.org/
.. _lcov: http://ltp.sourceforge.net/coverage/lcov.php
